package kop.ui;

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;
import kop.Main;
import kop.game.Game;
import kop.game.GameTestUtil;
import kop.ships.ShipClassList;
import kop.ships.ShipnameAlreadyExistsException;
import kop.ships.blueprint.ShipBlueprint;
import kop.ships.ShipClass;

import javax.swing.*;
import javax.swing.event.*;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Created by IntelliJ IDEA.
 * User: ola
 * Date: 4/6/11
 * Time: 7:41 AM
 * To change this template use File | Settings | File Templates.
 */
public class NewShipWindow implements KopWindow {
	private static final String MONEYFORMAT = "%.2f";
	private JPanel contentPane;
	private JTable newShipTable;
	private JButton purchase;
	private JComboBox shipTypeSelector;
	private JButton cancelButton;
	private JSlider loanSlider;
	private JLabel totalPrice;
	private JLabel maxLoanLabel;
	private JLabel currentCash;
	private JLabel priceUpFront;
	private JLabel cashAfterPurchase;
	private JTextField shipName;
	private JPanel shipTypePanel;
	private JScrollPane tableScrollPane;
	private JPanel infoBoxPanel;
	private JPanel buttonPanel;
	private ShipClassList shipClasses;
	private NewShipTableModel tableModel;
	private TableRowSorter<NewShipTableModel> sorter;

	public NewShipWindow() {
		$$$setupUI$$$();
		shipClasses = ShipClass.getShipClasses();

		purchase.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO check validation here, does the company have enough money to purchase etc?
				if (shipName.getText().length() == 0) {
					// TODO display error message.
					return;
				}

				try {
					Game.getInstance().getPlayerCompany().purchaseShip(loanSlider.getValue(),
							shipName.getText(),
							shipClasses.get(newShipTable.getSelectedRow()));
				} catch (ShipnameAlreadyExistsException e1) {
					// TODO display error message
					return;
				}

				Main.displayFrame(new MainWindow());
			}
		});
		shipTypeSelector.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				JComboBox source = (JComboBox) e.getSource();
				Object o = source.getSelectedItem();
				if (o instanceof ShipBlueprint.ShipType) {
					sorter.setRowFilter(new ShipTypeRowFilter((ShipBlueprint.ShipType) o));
				} else {
					sorter.setRowFilter(null);
				}
			}
		});
		cancelButton.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				Main.displayFrame(new MainWindow());
			}
		});

		loanSlider.setMajorTickSpacing(10);
		loanSlider.setMinorTickSpacing(1);
		loanSlider.setPaintTicks(true);
		loanSlider.setPaintLabels(true);

		loanSlider.addChangeListener(new ChangeListener() {
			@Override
			public void stateChanged(ChangeEvent e) {
				calcPrice(newShipTable.getSelectedRow());
			}
		});
		newShipTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
			@Override
			public void valueChanged(ListSelectionEvent e) {
				ListSelectionModel model = (ListSelectionModel) e.getSource();

				calcPrice(model.getLeadSelectionIndex());
			}
		});
		calcPrice(-1);
	}

	private void calcPrice(int selected) {
		double money = Game.getInstance().getPlayerCompany().getMoney();

		currentCash.setText(String.format(MONEYFORMAT, money));

		loanSlider.setEnabled(selected > -1);

		if (selected == -1) {
			maxLoanLabel.setText("");
			totalPrice.setText("");
			priceUpFront.setText("");
			cashAfterPurchase.setText(String.format(MONEYFORMAT, money));

			return;
		}

		int maxLoan = 60;
		maxLoanLabel.setText(String.format("%d%%", maxLoan));

		ShipClass c = shipClasses.get(selected);
		totalPrice.setText(String.format(MONEYFORMAT, c.getPrice()));

//		loanSlider.setExtent(c.getMaxLoanPercent());
		loanSlider.setMinimum(0);
		loanSlider.setExtent(100 - c.getMaxLoanPercent());
		loanSlider.setMaximum(100);

		double d = c.getPrice() * (100 - loanSlider.getValue()) / 100;
		priceUpFront.setText(String.format(MONEYFORMAT, d));
		cashAfterPurchase.setText(String.format(MONEYFORMAT, money - d));
	}

	public JPanel getContentPane() {
		return contentPane;
	}

	@Override
	public String getTitle() {
		return "New ship";  //To change body of implemented methods use File | Settings | File Templates.
	}

	private void createUIComponents() {
		if (shipClasses == null) {
			shipClasses = ShipClass.getShipClasses();
		}

		tableModel = new NewShipTableModel(shipClasses);
		sorter = new TableRowSorter<NewShipTableModel>(tableModel);
		newShipTable = new JTable(tableModel);
		newShipTable.setRowSorter(sorter);

		shipTypeSelector = new JComboBox();
		shipTypeSelector.addItem("");
		for (ShipBlueprint.ShipType type : ShipBlueprint.ShipType.values()) {
			shipTypeSelector.addItem(type);
		}

	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		createUIComponents();
		contentPane = new JPanel();
		contentPane.setLayout(new FormLayout("fill:max(d;4px):noGrow,fill:d:grow,fill:d:grow", "center:284px:grow,top:4dlu:noGrow,center:max(d;4px):noGrow,center:d:grow,center:d:grow"));
		final JPanel panel1 = new JPanel();
		panel1.setLayout(new GridBagLayout());
		CellConstraints cc = new CellConstraints();
		contentPane.add(panel1, cc.xy(3, 5));
		purchase = new JButton();
		purchase.setText("Purchase");
		GridBagConstraints gbc;
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel1.add(purchase, gbc);
		cancelButton = new JButton();
		cancelButton.setText("Cancel");
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.fill = GridBagConstraints.HORIZONTAL;
		panel1.add(cancelButton, gbc);
		final JPanel panel2 = new JPanel();
		panel2.setLayout(new FormLayout("fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:d:grow,left:4dlu:noGrow,fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:max(d;4px):noGrow,left:4dlu:noGrow,fill:max(d;4px):noGrow", "center:d:grow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:d:grow,top:4dlu:noGrow,center:d:grow"));
		contentPane.add(panel2, cc.xyw(2, 4, 2));
		final JLabel label1 = new JLabel();
		label1.setText("Total price");
		panel2.add(label1, cc.xy(1, 3));
		loanSlider = new JSlider();
		panel2.add(loanSlider, cc.xyw(3, 7, 5, CellConstraints.FILL, CellConstraints.DEFAULT));
		final JLabel label2 = new JLabel();
		label2.setText("Loan %");
		panel2.add(label2, cc.xy(1, 7));
		final JLabel label3 = new JLabel();
		label3.setText("Max loan");
		panel2.add(label3, cc.xy(1, 5));
		totalPrice = new JLabel();
		totalPrice.setHorizontalAlignment(2);
		totalPrice.setText("Label");
		panel2.add(totalPrice, cc.xy(5, 3));
		maxLoanLabel = new JLabel();
		maxLoanLabel.setHorizontalAlignment(2);
		maxLoanLabel.setHorizontalTextPosition(11);
		maxLoanLabel.setText("Label");
		panel2.add(maxLoanLabel, cc.xy(5, 5));
		final JLabel label4 = new JLabel();
		label4.setText("Price up front");
		panel2.add(label4, cc.xy(1, 11));
		priceUpFront = new JLabel();
		priceUpFront.setHorizontalAlignment(2);
		priceUpFront.setHorizontalTextPosition(11);
		priceUpFront.setText("Label");
		panel2.add(priceUpFront, cc.xy(5, 11));
		final JLabel label5 = new JLabel();
		label5.setText("Current cash");
		panel2.add(label5, cc.xy(1, 9));
		currentCash = new JLabel();
		currentCash.setHorizontalAlignment(2);
		currentCash.setHorizontalTextPosition(11);
		currentCash.setText("Label");
		panel2.add(currentCash, cc.xy(5, 9));
		final JLabel label6 = new JLabel();
		label6.setText("Cash after purchase");
		panel2.add(label6, cc.xy(1, 13));
		cashAfterPurchase = new JLabel();
		cashAfterPurchase.setHorizontalAlignment(2);
		cashAfterPurchase.setHorizontalTextPosition(11);
		cashAfterPurchase.setText("Label");
		panel2.add(cashAfterPurchase, cc.xy(5, 13));
		final JLabel label7 = new JLabel();
		label7.setText("Ship name");
		panel2.add(label7, cc.xy(1, 1));
		shipName = new JTextField();
		panel2.add(shipName, cc.xy(5, 1, CellConstraints.FILL, CellConstraints.DEFAULT));
		final JScrollPane scrollPane1 = new JScrollPane();
		contentPane.add(scrollPane1, cc.xyw(1, 1, 3, CellConstraints.FILL, CellConstraints.FILL));
		scrollPane1.setViewportView(newShipTable);
		final JPanel panel3 = new JPanel();
		panel3.setLayout(new GridBagLayout());
		contentPane.add(panel3, cc.xyw(1, 3, 3));
		gbc = new GridBagConstraints();
		gbc.gridx = 1;
		gbc.gridy = 0;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(shipTypeSelector, gbc);
		final JLabel label8 = new JLabel();
		label8.setText("Ship type");
		gbc = new GridBagConstraints();
		gbc.gridx = 0;
		gbc.gridy = 0;
		gbc.anchor = GridBagConstraints.WEST;
		panel3.add(label8, gbc);
		label8.setLabelFor(shipTypeSelector);
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return contentPane;
	}

	private static class NewShipTableModel implements TableModel {
		private ShipClassList shipClasses;

		String columnNames[] = {
				"Class type",
				"Class name",
				"Price",
				"Daily cost",
				"Deadweight",
				"Max speed",
				"Max fuel",
				"Fuel/day at 80%"
		};
		private Object filter = null;

		NewShipTableModel(ShipClassList shipClasses) {
			this.shipClasses = shipClasses;
		}

		@Override
		public Class<?> getColumnClass(int columnIndex) {
			if (shipClasses.size() > 0) {
				return getValueAt(0, columnIndex).getClass();
			}

			return null;
		}

		@Override
		public Object getValueAt(int rowIndex, int columnIndex) {
			ShipClass shipClass = shipClasses.get(rowIndex);
			switch (columnIndex) {
				case 0:
					return shipClass.getClassType();
				case 1:
					return shipClass.getClassName();
				case 2:
					return shipClass.getPrice();
				case 3:
					return shipClass.getBlueprint().getDailyCost();
				case 4:
					return shipClass.getBlueprint().getDwt();
				case 5:
					return shipClass.getBlueprint().getMaxSpeed();
				case 6:
					return shipClass.getBlueprint().getMaxFuel();
				case 7:
					return 24 * shipClass.getBlueprint().getFuelUsageFractionOfMaxPower(0.8);
			}

			return null;
		}

		@Override
		public boolean isCellEditable(int rowIndex, int columnIndex) {
			return false;  //To change body of implemented methods use File | Settings | File Templates.
		}

		@Override
		public int getRowCount() {
			return shipClasses.size();
		}

		@Override
		public int getColumnCount() {
			return columnNames.length;
		}

		@Override
		public String getColumnName(int columnIndex) {
			return columnNames[columnIndex];
		}

		@Override
		public void setValueAt(Object aValue, int rowIndex, int columnIndex) {
			//To change body of implemented methods use File | Settings | File Templates.
		}

		@Override
		public void addTableModelListener(TableModelListener l) {
			//To change body of implemented methods use File | Settings | File Templates.
		}

		@Override
		public void removeTableModelListener(TableModelListener l) {
			//To change body of implemented methods use File | Settings | File Templates.
		}
	}

	private static class ShipTypeRowFilter extends RowFilter<NewShipTableModel, Integer> {
		ShipBlueprint.ShipType type;

		public ShipTypeRowFilter(ShipBlueprint.ShipType type) {
			this.type = type;
		}

		@Override
		public boolean include(Entry<? extends NewShipTableModel, ? extends Integer> entry) {
			return entry.getValue(0).equals(type);
		}
	}

	public static void main(String[] args) {
		GameTestUtil.setupInstanceForTest();
		Main.displayFrame(new NewShipWindow());
	}
}
